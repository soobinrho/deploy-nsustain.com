# /etc/nginx/nginx.conf

# ---------------------------------------------------------------------
# This config is based on the stock nginx.conf file.
# Extra modificiations were based on Mozilla's ssl config website:
#   https://ssl-config.mozilla.org/
#
# If you make any change to this file, reload nginx configs with
# nginx -s reload
# ---------------------------------------------------------------------

user nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log /var/log/nginx/error.log warn;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

# Uncomment to include files with config snippets into the root context.
# NOTE: This will be enabled by default in Alpine 3.15.
#include /etc/nginx/conf.d/*.conf;

events {
    # The maximum number of simultaneous connections that can be opened by
    # a worker process.
    worker_connections 1024;
}

http {
    # Includes mapping of file name extensions to MIME types of responses
    # and defines the default type.
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Name servers used to resolve names of upstream servers into addresses.
    # It's also needed when using tcpsocket and udpsocket in Lua modules.
    #resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001;

    # Don't tell nginx version to the clients. Default is 'on'.
    server_tokens off;

    # Specifies the maximum accepted body size of a client request, as
    # indicated by the request header Content-Length. If the stated content
    # length is greater than this size, then the client receives the HTTP
    # error code 413. Set to 0 to disable. Default is '1m'.
    client_max_body_size 1m;

    # Sendfile copies data between one FD and other from within the kernel,
    # which is more efficient than read() + write(). Default is off.
    sendfile on;

    # Causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames. Default is 'off'.
    tcp_nopush on;


    # Enables the specified protocols. Default is TLSv1 TLSv1.1 TLSv1.2.
    # TIP: If you're not obligated to support ancient clients, remove TLSv1.1.
    ssl_protocols TLSv1.2 TLSv1.3;

    # Path of the file with Diffie-Hellman parameters for EDH ciphers.
    # TIP: Generate with: `openssl dhparam -out /etc/ssl/nginx/dh2048.pem 2048`
    #ssl_dhparam /etc/ssl/nginx/dh2048.pem;

    # Specifies that our cipher suits should be preferred over client ciphers.
    # Default is 'off'.
    ssl_prefer_server_ciphers off;

    # Enables a shared SSL cache with size that can hold around 8000 sessions.
    # Default is 'none'.
    ssl_session_cache shared:SSL:10m;

    # Specifies a time during which a client may reuse the session parameters.
    # Default is '5m'.
    ssl_session_timeout 1d;

    # Disable TLS session tickets (they are insecure). Default is 'on'.
    ssl_session_tickets off;

    # Set the Vary HTTP header as defined in the RFC 2616. Default is 'off'.
    gzip_vary on;


    # Helper variable for proxying websockets.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }


    # Specifies the main log format.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';

    # Sets the path, format, and configuration for a buffered log write.
    access_log /var/log/nginx/access.log main;

    # include /etc/nginx/http.d/*.conf;

    # ---------------------------------------------------------------------
    # https://BeeMovr.nsustain.com
    # ---------------------------------------------------------------------
    server {
        listen 80;
        listen [::]:80;
        server_name BeeMovr.nsustain.com;

        location ~ .well-known/acme-challenge/ {
            root /var/www/letsencrypt;
            default_type text/plain;
        }

        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl; 	
        http2 on;
        server_name BeeMovr.nsustain.com;

        location ~ .well-known/acme-challenge/ {
            root /var/www/letsencrypt;
            default_type text/plain;
        }

        # SSL/TLS Best Practices
        # Source:
        #   https://ssl-config.mozilla.org/
        ssl_certificate      /etc/letsencrypt/live/nsustain.com/fullchain.pem;
        ssl_certificate_key  /etc/letsencrypt/live/nsustain.com/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;
        
        # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
        ssl_dhparam /etc/ssl/ffdhe4096.pem;
        
        # intermediate configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers off;
        
        # HSTS (ngx_http_headers_module is required) (63072000 seconds)
        add_header Strict-Transport-Security "max-age=63072000" always;
        
        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # verify chain of trust of OCSP response using Root CA and Intermediate certs
        ssl_trusted_certificate /etc/letsencrypt/live/nsustain.com/chain.pem;
        
        resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] valid=300s; # Cloudflare
        resolver_timeout 5s;

	    location / {
	        # This is not the same as BeeMovr.com
		    # http://beemovr:3000 here refers to the host name inside Docker Compose network.
		    proxy_pass http://beemovr:3000;
		    proxy_http_version 1.1;
		    proxy_set_header Upgrade $http_upgrade;
		    proxy_set_header Connection 'upgrade';
		    proxy_set_header Host $host;
		    proxy_cache_bypass $http_upgrade;
	    }
    }

    # ---------------------------------------------------------------------
    # https://GoodLifeFarms.nsustain.com
    # ---------------------------------------------------------------------
    server {
        listen 80;
        listen [::]:80;
        server_name GoodLifeFarms.nsustain.com;

        location ~ .well-known/acme-challenge/ {
            root /var/www/letsencrypt;
            default_type text/plain;
        }

        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl; 	
        http2 on;
        server_name GoodLifeFarms.nsustain.com;

        location ~ .well-known/acme-challenge/ {
            root /var/www/letsencrypt;
            default_type text/plain;
        }

        # SSL/TLS Best Practices
        # Source:
        #   https://ssl-config.mozilla.org/
        ssl_certificate      /etc/letsencrypt/live/nsustain.com/fullchain.pem;
        ssl_certificate_key  /etc/letsencrypt/live/nsustain.com/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;
        
        # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
        ssl_dhparam /etc/ssl/ffdhe4096.pem;
        
        # intermediate configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers off;
        
        # HSTS (ngx_http_headers_module is required) (63072000 seconds)
        add_header Strict-Transport-Security "max-age=63072000" always;
        
        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # verify chain of trust of OCSP response using Root CA and Intermediate certs
        ssl_trusted_certificate /etc/letsencrypt/live/nsustain.com/chain.pem;
        
        resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] valid=300s; # Cloudflare
        resolver_timeout 5s;

	    location / {
	        # This is not the same as goodlifefarms.com
		    # http://goodlifefarms:3000 here refers to the host name inside Docker Compose network.
		    proxy_pass http://goodlifefarms:3000;
		    proxy_http_version 1.1;
		    proxy_set_header Upgrade $http_upgrade;
		    proxy_set_header Connection 'upgrade';
		    proxy_set_header Host $host;
		    proxy_cache_bypass $http_upgrade;
	    }
    }

    # ------------------------------------
    # https://nsustain.com
    # ------------------------------------

    # "The server certificate must appear before the chained
    # certificates in the combined file"
    # What this means is that, in ssl_certificate,
    # the server certificate be the first and everthing
    # has to come after the server certificate.
    # If you're using certbot, it's already taken care of.
    # Source:
    #   https://docs.nginx.com/nginx/admin-guide/security-controls/terminating-ssl-http/
    #   https://eff-certbot.readthedocs.io/en/stable/using.html#where-certs
    server {
        listen 80 backlog=4096;
        keepalive_timeout   70;
        server_name nsustain.com;

        location ~ .well-known/acme-challenge/ {
            root /var/www/letsencrypt;
            default_type text/plain;
        }

        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl; 	
        http2 on;
        server_name nsustain.com;

        location ~ .well-known/acme-challenge/ {
            root /var/www/letsencrypt;
            default_type text/plain;
        }

        # SSL/TLS Best Practices
        # Source:
        #   https://ssl-config.mozilla.org/
        ssl_certificate      /etc/letsencrypt/live/nsustain.com/fullchain.pem;
        ssl_certificate_key  /etc/letsencrypt/live/nsustain.com/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;
        
        # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
        ssl_dhparam /etc/ssl/ffdhe4096.pem;
        
        # intermediate configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers off;
        
        # HSTS (ngx_http_headers_module is required) (63072000 seconds)
        add_header Strict-Transport-Security "max-age=63072000" always;
        
        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # verify chain of trust of OCSP response using Root CA and Intermediate certs
        ssl_trusted_certificate /etc/letsencrypt/live/nsustain.com/chain.pem;
        
        resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] valid=300s; # Cloudflare
        resolver_timeout 5s;

        root /var/www/html/flarum/public;
        index index.php index.html index.htm;
        include /var/www/html/flarum/.nginx.conf;

        # Most of the gzip configs are located at:
        # /var/www/html/flarum/.nginx.conf
        # The following two lines are additional gzip configs for optimiation.
        gzip_buffers 16 8k;
        gzip_disable "MSIE [1-6]\.(?!.*SV1)";

        # Bulk of the request handling is done via Flarum's default
        # config file which is /var/www/html/flarum/.nginx.conf, an
        # the rest of the routing rules are taken from the following
        # Flarum community tutorial:
        # Source:
        #   https://discuss.flarum.org/d/7454-how-to-install-flarum-in-centos-7-with-nginx-php-fpm-mariadb
        location /flarum {
            deny all;
                return 404;
        }

        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_pass flarum:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include /etc/nginx/fastcgi_params;
        }

        location ~* \.html$ {
            expires -1;
        }

        # This will help nginx hanldle requests for the sitemap.
        # Source:
        #   https://discuss.flarum.org/d/14941-fof-sitemap
        location = /sitemap.xml {
            try_files $uri $uri/ /index.php?$query_string;
        }
    }
}
